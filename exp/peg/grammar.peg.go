package peg

// Code generated by peg -inline -switch grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulePattern
	ruleSequence
	ruleDir
	ruleDirElem
	ruleBase
	ruleBaseElem
	ruleRanges
	ruleRange
	ruleStartStop
	ruleStart
	ruleStop
	ruleStep
	ruleStepType
	rulePadChars
	ruleExt
	ruleExtElem
	ruleNum
	ruleCHAR_STAGGER
	ruleCHAR_CHUNK
	ruleCHAR_FILL
	rulePAD_HASH
	rulePAD_PRINTF
	rulePAD_HOUDINI
	rulePAD_UDIM
	ruleSLASH
	ruleNOTSLASH
	ruleDOT
	ruleRANGEDELIM
	ruleWORDCHAR
	ruleALPHA
	ruleDIGIT
	ruleNOTDIGIT
	ruleCHAR
	rule_
	ruleWhitespace
	ruleEOL
	ruleEND
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
)

var rul3s = [...]string{
	"Unknown",
	"Pattern",
	"Sequence",
	"Dir",
	"DirElem",
	"Base",
	"BaseElem",
	"Ranges",
	"Range",
	"StartStop",
	"Start",
	"Stop",
	"Step",
	"StepType",
	"PadChars",
	"Ext",
	"ExtElem",
	"Num",
	"CHAR_STAGGER",
	"CHAR_CHUNK",
	"CHAR_FILL",
	"PAD_HASH",
	"PAD_PRINTF",
	"PAD_HOUDINI",
	"PAD_UDIM",
	"SLASH",
	"NOTSLASH",
	"DOT",
	"RANGEDELIM",
	"WORDCHAR",
	"ALPHA",
	"DIGIT",
	"NOTDIGIT",
	"CHAR",
	"_",
	"Whitespace",
	"EOL",
	"END",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	parser

	Buffer string
	buffer []rune
	rules  [51]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.parsedType = seqType
		case ruleAction1:
			p.parsedType = rangeType
		case ruleAction2:
			p.Seq().Dir = text
		case ruleAction3:
			p.Seq().Base = text
		case ruleAction4:
			p.Seq().Range = text
		case ruleAction5:
			p.Seq().Pad = text
		case ruleAction6:
			p.Seq().Ext = text
		case ruleAction7:

			p.Ranges().current.Range = text
			p.Ranges().add()

		case ruleAction8:
			p.Ranges().current.addCmpt(text)
		case ruleAction9:
			p.Ranges().current.addCmpt(text)
		case ruleAction10:
			p.Ranges().current.StepType = StepType(text)
		case ruleAction11:
			p.Ranges().current.addCmpt(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Pattern <- <(((Sequence Action0) / (Ranges Action1)) END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						{
							position5 := position
							{
								position6 := position
								{
									position7 := position
									{
										position10 := position
									l11:
										{
											position12, tokenIndex12 := position, tokenIndex
											{
												position13 := position
												{
													position14, tokenIndex14 := position, tokenIndex
													{
														position15, tokenIndex15 := position, tokenIndex
														if buffer[position] != rune('/') {
															goto l16
														}
														position++
														goto l15
													l16:
														position, tokenIndex = position15, tokenIndex15
														if buffer[position] != rune('\\') {
															goto l14
														}
														position++
													}
												l15:
													goto l12
												l14:
													position, tokenIndex = position14, tokenIndex14
												}
												if !matchDot() {
													goto l12
												}
												add(ruleNOTSLASH, position13)
											}
											goto l11
										l12:
											position, tokenIndex = position12, tokenIndex12
										}
										{
											position17 := position
											{
												position18, tokenIndex18 := position, tokenIndex
												if buffer[position] != rune('/') {
													goto l19
												}
												position++
												goto l18
											l19:
												position, tokenIndex = position18, tokenIndex18
												if buffer[position] != rune('\\') {
													goto l3
												}
												position++
											}
										l18:
											add(ruleSLASH, position17)
										}
										add(ruleDirElem, position10)
									}
								l8:
									{
										position9, tokenIndex9 := position, tokenIndex
										{
											position20 := position
										l21:
											{
												position22, tokenIndex22 := position, tokenIndex
												{
													position23 := position
													{
														position24, tokenIndex24 := position, tokenIndex
														{
															position25, tokenIndex25 := position, tokenIndex
															if buffer[position] != rune('/') {
																goto l26
															}
															position++
															goto l25
														l26:
															position, tokenIndex = position25, tokenIndex25
															if buffer[position] != rune('\\') {
																goto l24
															}
															position++
														}
													l25:
														goto l22
													l24:
														position, tokenIndex = position24, tokenIndex24
													}
													if !matchDot() {
														goto l22
													}
													add(ruleNOTSLASH, position23)
												}
												goto l21
											l22:
												position, tokenIndex = position22, tokenIndex22
											}
											{
												position27 := position
												{
													position28, tokenIndex28 := position, tokenIndex
													if buffer[position] != rune('/') {
														goto l29
													}
													position++
													goto l28
												l29:
													position, tokenIndex = position28, tokenIndex28
													if buffer[position] != rune('\\') {
														goto l9
													}
													position++
												}
											l28:
												add(ruleSLASH, position27)
											}
											add(ruleDirElem, position20)
										}
										goto l8
									l9:
										position, tokenIndex = position9, tokenIndex9
									}
									add(rulePegText, position7)
								}
								add(ruleDir, position6)
							}
							add(rulePegText, position5)
						}
						{
							add(ruleAction2, position)
						}
						{
							position31 := position
							{
								position32, tokenIndex32 := position, tokenIndex
								{
									position34 := position
									{
										position35, tokenIndex35 := position, tokenIndex
										if !_rules[ruleDOT]() {
											goto l35
										}
										goto l36
									l35:
										position, tokenIndex = position35, tokenIndex35
									}
								l36:
									if !_rules[ruleBaseElem]() {
										goto l32
									}
									{
										position37, tokenIndex37 := position, tokenIndex
										if !_rules[ruleRANGEDELIM]() {
											goto l38
										}
										if !_rules[ruleEND]() {
											goto l38
										}
										goto l37
									l38:
										position, tokenIndex = position37, tokenIndex37
									l39:
										{
											position40, tokenIndex40 := position, tokenIndex
											{
												position41, tokenIndex41 := position, tokenIndex
												{
													position42, tokenIndex42 := position, tokenIndex
													{
														position44, tokenIndex44 := position, tokenIndex
														if !_rules[ruleDOT]() {
															goto l44
														}
														goto l45
													l44:
														position, tokenIndex = position44, tokenIndex44
													}
												l45:
													if !_rules[rulePadChars]() {
														goto l42
													}
													goto l43
												l42:
													position, tokenIndex = position42, tokenIndex42
												}
											l43:
												if !_rules[ruleExtElem]() {
													goto l41
												}
												if !_rules[ruleEND]() {
													goto l41
												}
												goto l40
											l41:
												position, tokenIndex = position41, tokenIndex41
											}
											if !_rules[ruleDOT]() {
												goto l40
											}
											if !_rules[ruleBaseElem]() {
												goto l40
											}
											goto l39
										l40:
											position, tokenIndex = position40, tokenIndex40
										}
									}
								l37:
									{
										position46, tokenIndex46 := position, tokenIndex
										{
											position48, tokenIndex48 := position, tokenIndex
											if !_rules[ruleExtElem]() {
												goto l48
											}
											if !_rules[ruleEND]() {
												goto l48
											}
											goto l46
										l48:
											position, tokenIndex = position48, tokenIndex48
										}
										if !_rules[ruleDOT]() {
											goto l46
										}
										goto l47
									l46:
										position, tokenIndex = position46, tokenIndex46
									}
								l47:
									add(ruleBase, position34)
								}
								goto l33
							l32:
								position, tokenIndex = position32, tokenIndex32
							}
						l33:
							add(rulePegText, position31)
						}
						{
							add(ruleAction3, position)
						}
						{
							position50 := position
							{
								position51, tokenIndex51 := position, tokenIndex
								if !_rules[ruleRanges]() {
									goto l51
								}
								goto l52
							l51:
								position, tokenIndex = position51, tokenIndex51
							}
						l52:
							add(rulePegText, position50)
						}
						{
							add(ruleAction4, position)
						}
						{
							position54 := position
							{
								position55, tokenIndex55 := position, tokenIndex
								if !_rules[rulePadChars]() {
									goto l55
								}
								goto l56
							l55:
								position, tokenIndex = position55, tokenIndex55
							}
						l56:
							add(rulePegText, position54)
						}
						{
							add(ruleAction5, position)
						}
						{
							position58 := position
							{
								position59, tokenIndex59 := position, tokenIndex
								{
									position61 := position
								l62:
									{
										position63, tokenIndex63 := position, tokenIndex
										if !_rules[ruleExtElem]() {
											goto l63
										}
										goto l62
									l63:
										position, tokenIndex = position63, tokenIndex63
									}
									if !_rules[ruleEND]() {
										goto l59
									}
									add(ruleExt, position61)
								}
								goto l60
							l59:
								position, tokenIndex = position59, tokenIndex59
							}
						l60:
							add(rulePegText, position58)
						}
						{
							add(ruleAction6, position)
						}
						add(ruleSequence, position4)
					}
					{
						add(ruleAction0, position)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleRanges]() {
						goto l0
					}
					{
						add(ruleAction1, position)
					}
				}
			l2:
				if !_rules[ruleEND]() {
					goto l0
				}
				add(rulePattern, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Sequence <- <(<Dir> Action2 <Base?> Action3 <Ranges?> Action4 <PadChars?> Action5 <Ext?> Action6)> */
		nil,
		/* 2 Dir <- <<DirElem+>> */
		nil,
		/* 3 DirElem <- <(NOTSLASH* SLASH)> */
		nil,
		/* 4 Base <- <(DOT? BaseElem ((RANGEDELIM END) / (!((DOT? PadChars)? ExtElem END) DOT BaseElem)*) (!(ExtElem END) DOT)?)> */
		nil,
		/* 5 BaseElem <- <((NOTDIGIT CHAR+ RANGEDELIM+) / (NOTDIGIT CHAR*) / (DIGIT WORDCHAR CHAR*))> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				{
					position73, tokenIndex73 := position, tokenIndex
					if !_rules[ruleNOTDIGIT]() {
						goto l74
					}
					if !_rules[ruleCHAR]() {
						goto l74
					}
				l75:
					{
						position76, tokenIndex76 := position, tokenIndex
						if !_rules[ruleCHAR]() {
							goto l76
						}
						goto l75
					l76:
						position, tokenIndex = position76, tokenIndex76
					}
					if !_rules[ruleRANGEDELIM]() {
						goto l74
					}
				l77:
					{
						position78, tokenIndex78 := position, tokenIndex
						if !_rules[ruleRANGEDELIM]() {
							goto l78
						}
						goto l77
					l78:
						position, tokenIndex = position78, tokenIndex78
					}
					goto l73
				l74:
					position, tokenIndex = position73, tokenIndex73
					if !_rules[ruleNOTDIGIT]() {
						goto l79
					}
				l80:
					{
						position81, tokenIndex81 := position, tokenIndex
						if !_rules[ruleCHAR]() {
							goto l81
						}
						goto l80
					l81:
						position, tokenIndex = position81, tokenIndex81
					}
					goto l73
				l79:
					position, tokenIndex = position73, tokenIndex73
					if !_rules[ruleDIGIT]() {
						goto l71
					}
					{
						position82 := position
						{
							switch buffer[position] {
							case '_':
								if buffer[position] != rune('_') {
									goto l71
								}
								position++
							case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l71
								}
								position++
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l71
								}
								position++
							default:
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l71
								}
								position++
							}
						}

						add(ruleWORDCHAR, position82)
					}
				l84:
					{
						position85, tokenIndex85 := position, tokenIndex
						if !_rules[ruleCHAR]() {
							goto l85
						}
						goto l84
					l85:
						position, tokenIndex = position85, tokenIndex85
					}
				}
			l73:
				add(ruleBaseElem, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 6 Ranges <- <(_ Range _ (',' _ Range _)*)> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if !_rules[rule_]() {
					goto l86
				}
				if !_rules[ruleRange]() {
					goto l86
				}
				if !_rules[rule_]() {
					goto l86
				}
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l89
					}
					position++
					if !_rules[rule_]() {
						goto l89
					}
					if !_rules[ruleRange]() {
						goto l89
					}
					if !_rules[rule_]() {
						goto l89
					}
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				add(ruleRanges, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 7 Range <- <(<(StartStop / Start)> Action7)> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
				{
					position92 := position
					{
						position93, tokenIndex93 := position, tokenIndex
						{
							position95 := position
							if !_rules[rule_]() {
								goto l94
							}
							if !_rules[ruleStart]() {
								goto l94
							}
							if !_rules[rule_]() {
								goto l94
							}
							if buffer[position] != rune('-') {
								goto l94
							}
							position++
							if !_rules[rule_]() {
								goto l94
							}
							{
								position96 := position
								if !_rules[rule_]() {
									goto l94
								}
								{
									position97 := position
									if !_rules[ruleNum]() {
										goto l94
									}
									add(rulePegText, position97)
								}
								if !_rules[rule_]() {
									goto l94
								}
								{
									add(ruleAction9, position)
								}
								add(ruleStop, position96)
							}
							if !_rules[rule_]() {
								goto l94
							}
							{
								position99, tokenIndex99 := position, tokenIndex
								{
									position101 := position
									{
										position102 := position
										{
											position103 := position
											{
												switch buffer[position] {
												case 'y':
													{
														position105 := position
														if buffer[position] != rune('y') {
															goto l99
														}
														position++
														add(ruleCHAR_FILL, position105)
													}
												case 'x':
													{
														position106 := position
														if buffer[position] != rune('x') {
															goto l99
														}
														position++
														add(ruleCHAR_CHUNK, position106)
													}
												default:
													{
														position107 := position
														if buffer[position] != rune(':') {
															goto l99
														}
														position++
														add(ruleCHAR_STAGGER, position107)
													}
												}
											}

											add(ruleStepType, position103)
										}
										add(rulePegText, position102)
									}
									{
										add(ruleAction10, position)
									}
									{
										position109 := position
										if !_rules[ruleNum]() {
											goto l99
										}
										add(rulePegText, position109)
									}
									{
										add(ruleAction11, position)
									}
									add(ruleStep, position101)
								}
								goto l100
							l99:
								position, tokenIndex = position99, tokenIndex99
							}
						l100:
							if !_rules[rule_]() {
								goto l94
							}
							add(ruleStartStop, position95)
						}
						goto l93
					l94:
						position, tokenIndex = position93, tokenIndex93
						if !_rules[ruleStart]() {
							goto l90
						}
					}
				l93:
					add(rulePegText, position92)
				}
				{
					add(ruleAction7, position)
				}
				add(ruleRange, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 8 StartStop <- <(_ Start _ '-' _ Stop _ Step? _)> */
		nil,
		/* 9 Start <- <(_ <Num> _ Action8)> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				if !_rules[rule_]() {
					goto l113
				}
				{
					position115 := position
					if !_rules[ruleNum]() {
						goto l113
					}
					add(rulePegText, position115)
				}
				if !_rules[rule_]() {
					goto l113
				}
				{
					add(ruleAction8, position)
				}
				add(ruleStart, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 10 Stop <- <(_ <Num> _ Action9)> */
		nil,
		/* 11 Step <- <(<StepType> Action10 <Num> Action11)> */
		nil,
		/* 12 StepType <- <((&('y') CHAR_FILL) | (&('x') CHAR_CHUNK) | (&(':') CHAR_STAGGER))> */
		nil,
		/* 13 PadChars <- <(PAD_PRINTF / ((&('%' | '<') PAD_UDIM) | (&('$') PAD_HOUDINI) | (&('#' | '@') PAD_HASH+)))> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				{
					position122, tokenIndex122 := position, tokenIndex
					{
						position124 := position
						if buffer[position] != rune('%') {
							goto l123
						}
						position++
					l125:
						{
							position126, tokenIndex126 := position, tokenIndex
							if !_rules[ruleDIGIT]() {
								goto l126
							}
							goto l125
						l126:
							position, tokenIndex = position126, tokenIndex126
						}
						if buffer[position] != rune('d') {
							goto l123
						}
						position++
						add(rulePAD_PRINTF, position124)
					}
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					{
						switch buffer[position] {
						case '%', '<':
							{
								position128 := position
								{
									position129, tokenIndex129 := position, tokenIndex
									if buffer[position] != rune('<') {
										goto l130
									}
									position++
									if buffer[position] != rune('U') {
										goto l130
									}
									position++
									if buffer[position] != rune('D') {
										goto l130
									}
									position++
									if buffer[position] != rune('I') {
										goto l130
									}
									position++
									if buffer[position] != rune('M') {
										goto l130
									}
									position++
									if buffer[position] != rune('>') {
										goto l130
									}
									position++
									goto l129
								l130:
									position, tokenIndex = position129, tokenIndex129
									if buffer[position] != rune('%') {
										goto l120
									}
									position++
									if buffer[position] != rune('(') {
										goto l120
									}
									position++
									if buffer[position] != rune('U') {
										goto l120
									}
									position++
									if buffer[position] != rune('D') {
										goto l120
									}
									position++
									if buffer[position] != rune('I') {
										goto l120
									}
									position++
									if buffer[position] != rune('M') {
										goto l120
									}
									position++
									if buffer[position] != rune(')') {
										goto l120
									}
									position++
									if buffer[position] != rune('d') {
										goto l120
									}
									position++
								}
							l129:
								add(rulePAD_UDIM, position128)
							}
						case '$':
							{
								position131 := position
								if buffer[position] != rune('$') {
									goto l120
								}
								position++
								if buffer[position] != rune('F') {
									goto l120
								}
								position++
							l132:
								{
									position133, tokenIndex133 := position, tokenIndex
									if !_rules[ruleDIGIT]() {
										goto l133
									}
									goto l132
								l133:
									position, tokenIndex = position133, tokenIndex133
								}
								add(rulePAD_HOUDINI, position131)
							}
						default:
							{
								position136 := position
								{
									position137, tokenIndex137 := position, tokenIndex
									if buffer[position] != rune('#') {
										goto l138
									}
									position++
									goto l137
								l138:
									position, tokenIndex = position137, tokenIndex137
									if buffer[position] != rune('@') {
										goto l120
									}
									position++
								}
							l137:
								add(rulePAD_HASH, position136)
							}
						l134:
							{
								position135, tokenIndex135 := position, tokenIndex
								{
									position139 := position
									{
										position140, tokenIndex140 := position, tokenIndex
										if buffer[position] != rune('#') {
											goto l141
										}
										position++
										goto l140
									l141:
										position, tokenIndex = position140, tokenIndex140
										if buffer[position] != rune('@') {
											goto l135
										}
										position++
									}
								l140:
									add(rulePAD_HASH, position139)
								}
								goto l134
							l135:
								position, tokenIndex = position135, tokenIndex135
							}
						}
					}

				}
			l122:
				add(rulePadChars, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 14 Ext <- <(ExtElem* END)> */
		nil,
		/* 15 ExtElem <- <(DOT CHAR+)> */
		func() bool {
			position143, tokenIndex143 := position, tokenIndex
			{
				position144 := position
				if !_rules[ruleDOT]() {
					goto l143
				}
				if !_rules[ruleCHAR]() {
					goto l143
				}
			l145:
				{
					position146, tokenIndex146 := position, tokenIndex
					if !_rules[ruleCHAR]() {
						goto l146
					}
					goto l145
				l146:
					position, tokenIndex = position146, tokenIndex146
				}
				add(ruleExtElem, position144)
			}
			return true
		l143:
			position, tokenIndex = position143, tokenIndex143
			return false
		},
		/* 16 Num <- <('-'? [0-9]+)> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				{
					position149, tokenIndex149 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l149
					}
					position++
					goto l150
				l149:
					position, tokenIndex = position149, tokenIndex149
				}
			l150:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l147
				}
				position++
			l151:
				{
					position152, tokenIndex152 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l152
					}
					position++
					goto l151
				l152:
					position, tokenIndex = position152, tokenIndex152
				}
				add(ruleNum, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 17 CHAR_STAGGER <- <':'> */
		nil,
		/* 18 CHAR_CHUNK <- <'x'> */
		nil,
		/* 19 CHAR_FILL <- <'y'> */
		nil,
		/* 20 PAD_HASH <- <('#' / '@')> */
		nil,
		/* 21 PAD_PRINTF <- <('%' DIGIT* 'd')> */
		nil,
		/* 22 PAD_HOUDINI <- <('$' 'F' DIGIT*)> */
		nil,
		/* 23 PAD_UDIM <- <(('<' 'U' 'D' 'I' 'M' '>') / ('%' '(' 'U' 'D' 'I' 'M' ')' 'd'))> */
		nil,
		/* 24 SLASH <- <('/' / '\\')> */
		nil,
		/* 25 NOTSLASH <- <(!('/' / '\\') .)> */
		nil,
		/* 26 DOT <- <'.'> */
		func() bool {
			position162, tokenIndex162 := position, tokenIndex
			{
				position163 := position
				if buffer[position] != rune('.') {
					goto l162
				}
				position++
				add(ruleDOT, position163)
			}
			return true
		l162:
			position, tokenIndex = position162, tokenIndex162
			return false
		},
		/* 27 RANGEDELIM <- <((&('-') '-') | (&('_') '_') | (&('.') '.') | (&(':') ':'))> */
		func() bool {
			position164, tokenIndex164 := position, tokenIndex
			{
				position165 := position
				{
					switch buffer[position] {
					case '-':
						if buffer[position] != rune('-') {
							goto l164
						}
						position++
					case '_':
						if buffer[position] != rune('_') {
							goto l164
						}
						position++
					case '.':
						if buffer[position] != rune('.') {
							goto l164
						}
						position++
					default:
						if buffer[position] != rune(':') {
							goto l164
						}
						position++
					}
				}

				add(ruleRANGEDELIM, position165)
			}
			return true
		l164:
			position, tokenIndex = position164, tokenIndex164
			return false
		},
		/* 28 WORDCHAR <- <((&('_') '_') | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]))> */
		nil,
		/* 29 ALPHA <- <([a-z] / [A-Z])> */
		nil,
		/* 30 DIGIT <- <[0-9]> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l169
				}
				position++
				add(ruleDIGIT, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 31 NOTDIGIT <- <(![0-9] .)> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				{
					position173, tokenIndex173 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l173
					}
					position++
					goto l171
				l173:
					position, tokenIndex = position173, tokenIndex173
				}
				if !matchDot() {
					goto l171
				}
				add(ruleNOTDIGIT, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 32 CHAR <- <(!((&('.') '.') | (&('*') '*') | (&('?') '?') | (&('|') '|') | (&('\\') '\\') | (&('/') '/') | (&('"') '"') | (&('>') '>') | (&('<') '<')) .)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				{
					position176, tokenIndex176 := position, tokenIndex
					{
						switch buffer[position] {
						case '.':
							if buffer[position] != rune('.') {
								goto l176
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l176
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l176
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l176
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l176
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l176
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l176
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l176
							}
							position++
						default:
							if buffer[position] != rune('<') {
								goto l176
							}
							position++
						}
					}

					goto l174
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
				if !matchDot() {
					goto l174
				}
				add(ruleCHAR, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 33 _ <- <Whitespace*> */
		func() bool {
			{
				position179 := position
			l180:
				{
					position181, tokenIndex181 := position, tokenIndex
					{
						position182 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l181
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l181
								}
								position++
							default:
								{
									position184 := position
									{
										position185, tokenIndex185 := position, tokenIndex
										if buffer[position] != rune('\r') {
											goto l186
										}
										position++
										if buffer[position] != rune('\n') {
											goto l186
										}
										position++
										goto l185
									l186:
										position, tokenIndex = position185, tokenIndex185
										if buffer[position] != rune('\n') {
											goto l187
										}
										position++
										goto l185
									l187:
										position, tokenIndex = position185, tokenIndex185
										if buffer[position] != rune('\r') {
											goto l181
										}
										position++
									}
								l185:
									add(ruleEOL, position184)
								}
							}
						}

						add(ruleWhitespace, position182)
					}
					goto l180
				l181:
					position, tokenIndex = position181, tokenIndex181
				}
				add(rule_, position179)
			}
			return true
		},
		/* 34 Whitespace <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') EOL))> */
		nil,
		/* 35 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		nil,
		/* 36 END <- <!.> */
		func() bool {
			position190, tokenIndex190 := position, tokenIndex
			{
				position191 := position
				{
					position192, tokenIndex192 := position, tokenIndex
					if !matchDot() {
						goto l192
					}
					goto l190
				l192:
					position, tokenIndex = position192, tokenIndex192
				}
				add(ruleEND, position191)
			}
			return true
		l190:
			position, tokenIndex = position190, tokenIndex190
			return false
		},
		/* 38 Action0 <- <{ p.parsedType = seqType }> */
		nil,
		/* 39 Action1 <- <{ p.parsedType = rangeType }> */
		nil,
		nil,
		/* 41 Action2 <- <{ p.Seq().Dir = text }> */
		nil,
		/* 42 Action3 <- <{ p.Seq().Base = text }> */
		nil,
		/* 43 Action4 <- <{ p.Seq().Range = text }> */
		nil,
		/* 44 Action5 <- <{ p.Seq().Pad = text }> */
		nil,
		/* 45 Action6 <- <{ p.Seq().Ext = text }> */
		nil,
		/* 46 Action7 <- <{
		    p.Ranges().current.Range = text
		    p.Ranges().add()
		}> */
		nil,
		/* 47 Action8 <- <{ p.Ranges().current.addCmpt(text) }> */
		nil,
		/* 48 Action9 <- <{ p.Ranges().current.addCmpt(text) }> */
		nil,
		/* 49 Action10 <- <{ p.Ranges().current.StepType = StepType(text) }> */
		nil,
		/* 50 Action11 <- <{ p.Ranges().current.addCmpt(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
